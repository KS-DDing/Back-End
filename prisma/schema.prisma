// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique @db.VarChar(30)
  name       String     @unique @db.VarChar(30)
  password   String     @db.VarChar(200)
  createAt   DateTime   @default(now())
  updateAt   DateTime?  @updatedAt
  posts      Post[]
  isAdmin    Int        @default(0) //admin일 경우 1, 일반 사용자일 경우 0
  comments   Comment[]
  liker      Like[]
  followers  User[]     @relation("UserFollows", references: [id])
  followings User[]     @relation("UserFollows", references: [id])
  images     Image[]
  categories Category[]

  user_profile Profile?
  @@map(name: "users")
}

model Post {
  id           Int       @id @default(autoincrement())
  title        String
  content      String    @db.Text
  createAt     DateTime  @default(now())
  updateAt     DateTime  @updatedAt
  author       User      @relation(fields: [userId], references: [id])
  userId       Int
  postCategory Category? @relation(fields: [categoryId], references: [id])
  categoryId   Int?

  retweettedPost   Post?  @relation("Retweet", fields: [retweettedPostId], references: [id])
  retweettedPostId Int?
  retweetterPost   Post[] @relation("Retweet")

  comments  Comment[]
  images    Image[]
  hashtags  PostHashtag[]
  liker     Like[]
  thumbnail Thumbnail?

  @@map("posts")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  post   Post[]
  author User   @relation(fields: [userId], references: [id])
  userId Int
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  commenter   User     @relation(fields: [userId], references: [id])
  userId      Int
  PostComment Post     @relation(fields: [postId], references: [id])
  postId      Int

  @@map("comments")
}

model Image {
  id        Int      @id @default(autoincrement())
  src       String   @unique
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  postImage Post     @relation(fields: [postId], references: [id])
  postId    Int
  userImage User     @relation(fields: [userId], references: [id])
  userId    Int

  @@map("images")
}

model Thumbnail {
  id             Int      @id @default(autoincrement())
  src            String   @unique
  createAt       DateTime @default(now())
  updateAt       DateTime @updatedAt
  thumbnail_post Post     @relation(fields: [postId], references: [id])
  postId         Int

  @@map("thumbnails")
}

model Hashtag {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(20)
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  posthashtags PostHashtag[]


  @@map("hashtags")
}

model PostHashtag {
  post      Post    @relation(fields: [postId], references: [id])
  postId    Int
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id])
  hashtagId Int

  @@id([postId, hashtagId])
  @@map("posthashtags")
}

model Like {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@id([userId, postId])
  @@map("likes")
}

model Profile {
  id        Int     @id @default(autoincrement())
  introduce String?
  email     String?
  company   String?

  user   User @relation(fields: [userId], references: [id])
  userId Int
}
